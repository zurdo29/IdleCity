const CACHE_NAME = 'idlecity-v1.0.0'; const STATIC_CACHE = 'idlecity-static-v1.0.0'; const DYNAMIC_CACHE = 'idlecity-dynamic-v1.0.0'; const STATIC_ASSETS = [ '/', '/index.html', '/css/styles.css', '/js/game.js', '/js/ui.js', '/js/storage.js', '/js/achievements.js', '/js/statistics.js', '/js/performance.js', '/js/testing.js', '/manifest.json', 'https: ]; const DYNAMIC_PATTERNS = [ /\/api\ /\/data\ /\.json$/ ]; const NETWORK_FIRST_PATTERNS = [ /\/api\/save/, /\/api\/load/, /\/api\/sync/ ]; self.addEventListener('install', (event) => { console.log('üîß Service Worker installing...'); event.waitUntil( Promise.all([ caches.open(STATIC_CACHE).then((cache) => { console.log('üì¶ Caching static assets...'); return cache.addAll(STATIC_ASSETS.map(url => new Request(url, { cache: 'reload' })))}), self.skipWaiting() ]) )}); self.addEventListener('activate', (event) => { console.log('‚úÖ Service Worker activating...'); event.waitUntil( Promise.all([ caches.keys().then((cacheNames) => { return Promise.all( cacheNames.map((cacheName) => { if (cacheName !== STATIC_CACHE && cacheName !== DYNAMIC_CACHE) { console.log('üóëÔ∏è Deleting old cache:', cacheName); return caches.delete(cacheName)} }) )}), self.clients.claim() ]) )}); self.addEventListener('fetch', (event) => { const { request } = event; const url = new URL(request.url); if (request.method !== 'GET') { return} if (!url.protocol.startsWith('http')) { return} event.respondWith(handleFetch(request))}); async function handleFetch(request) { const url = new URL(request.url); try { if (NETWORK_FIRST_PATTERNS.some(pattern => pattern.test(url.pathname))) { return await networkFirst(request)} if (STATIC_ASSETS.some(asset => url.pathname === asset || url.href === asset)) { return await cacheFirst(request)} if (DYNAMIC_PATTERNS.some(pattern => pattern.test(url.pathname))) { return await staleWhileRevalidate(request)} return await cacheFirst(request)} catch (error) { console.error('‚ùå Fetch error:', error); return await handleFetchError(request, error)} } async function cacheFirst(request) { const cachedResponse = await caches.match(request); if (cachedResponse) { updateCacheInBackground(request); return cachedResponse} const networkResponse = await fetch(request); if (networkResponse.ok) { const cache = await caches.open(STATIC_CACHE); cache.put(request, networkResponse.clone())} return networkResponse} async function networkFirst(request) { try { const networkResponse = await fetch(request); if (networkResponse.ok) { const cache = await caches.open(DYNAMIC_CACHE); cache.put(request, networkResponse.clone())} return networkResponse} catch (error) { const cachedResponse = await caches.match(request); if (cachedResponse) { return cachedResponse} throw error} } async function staleWhileRevalidate(request) { const cachedResponse = await caches.match(request); const fetchPromise = fetch(request).then(async (networkResponse) => { if (networkResponse.ok) { const cache = await caches.open(DYNAMIC_CACHE); cache.put(request, networkResponse.clone())} return networkResponse}).catch(() => { }); if (cachedResponse) { return cachedResponse} return await fetchPromise} async function updateCacheInBackground(request) { try { const networkResponse = await fetch(request); if (networkResponse.ok) { const cache = await caches.open(STATIC_CACHE); cache.put(request, networkResponse.clone())} } catch (error) { console.log('Background cache update failed:', error.message)} } async function handleFetchError(request, error) { const url = new URL(request.url); const cachedResponse = await caches.match(request); if (cachedResponse) { return cachedResponse} if (request.headers.get('accept')?.includes('text/html')) { return await caches.match('/') || new Response( createOfflinePage(), { headers: { 'Content-Type': 'text/html' }, status: 200 } )} return new Response( JSON.stringify({ error: 'Offline', message: 'This content is not available offline' }), { status: 503, headers: { 'Content-Type': 'application/json' } } )} function createOfflinePage() { return ` <!DOCTYPE html> <html lang="en"> <head> <meta charset="UTF-8"> <meta name="viewport" content="width=device-width, initial-scale=1.0"> <title>IdleCity - Offline</title> <style> body { font-family: system-ui, -apple-system, sans-serif; display: flex; flex-direction: column; align-items: center; justify-content: center; min-height: 100vh; margin: 0; background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; text-align: center; padding: 20px} .offline-container { max-width: 400px; background: rgba(255, 255, 255, 0.1); padding: 40px; border-radius: 20px; backdrop-filter: blur(10px)} .city-icon { font-size: 4rem; margin-bottom: 20px} h1 { margin: 0 0 20px 0; font-size: 2rem} p { margin: 0 0 30px 0; opacity: 0.9; line-height: 1.6} .retry-btn { background: #3b82f6; color: white; border: none; padding: 12px 24px; border-radius: 8px; font-size: 1rem; cursor: pointer; transition: background 0.3s} .retry-btn:hover { background: #2563eb} </style> </head> <body> <div class="offline-container"> <div class="city-icon">üèôÔ∏è</div> <h1>You're Offline</h1> <p>IdleCity is not available right now. Check your internet connection and try again.</p> <button class="retry-btn" onclick="window.location.reload()"> Try Again </button> </div> </body> </html> `} self.addEventListener('sync', (event) => { console.log('üîÑ Background sync triggered:', event.tag); if (event.tag === 'save-game-data') { event.waitUntil(syncGameData())} }); async function syncGameData() { try { const clients = await self.clients.matchAll(); for (const client of clients) { client.postMessage({ type: 'SYNC_GAME_DATA', timestamp: Date.now() })} console.log('‚úÖ Game data sync completed')} catch (error) { console.error('‚ùå Game data sync failed:', error)} } self.addEventListener('push', (event) => { console.log('üì± Push notification received'); const options = { body: 'Your city is generating resources!', icon: '/manifest.json', badge: '/manifest.json', tag: 'idle-notification', requireInteraction: false, actions: [ { action: 'open-game', title: 'Open Game', icon: '/manifest.json' }, { action: 'dismiss', title: 'Dismiss' } ], data: { url: '/', timestamp: Date.now() } }; if (event.data) { try { const payload = event.data.json(); options.body = payload.message || options.body; options.data = { ...options.data, ...payload.data }} catch (error) { console.error('‚ùå Error parsing push payload:', error)} } event.waitUntil( self.registration.showNotification('IdleCity', options) )}); self.addEventListener('notificationclick', (event) => { console.log('üîî Notification clicked:', event.action); event.notification.close(); if (event.action === 'open-game' || !event.action) { event.waitUntil( clients.matchAll({ type: 'window' }).then((clientList) => { for (const client of clientList) { if (client.url.includes(self.location.origin)) { return client.focus()} } return clients.openWindow('/')}) )} }); self.addEventListener('periodicsync', (event) => { console.log('‚è∞ Periodic sync triggered:', event.tag); if (event.tag === 'idle-check') { event.waitUntil(checkIdleProgress())} }); async function checkIdleProgress() { try { const clients = await self.clients.matchAll(); if (clients.length === 0) { const lastActiveTime = await getLastActiveTime(); const gameState = await getCachedGameState(); const now = Date.now(); const idleTime = now - lastActiveTime; if (idleTime > 30 * 60 * 1000) { let message = 'Your city has been generating resources while you were away!'; if (gameState && gameState.resources) { const coinsPerSecond = gameState.resources.coinsPerSecond || 0; const idleSeconds = Math.floor(idleTime / 1000); const estimatedCoins = Math.floor(coinsPerSecond * idleSeconds); if (estimatedCoins > 0) { message = `Your city earned approximately ${estimatedCoins} coins while you were away!`} } await self.registration.showNotification('IdleCity', { body: message, icon: '/manifest.json', tag: 'idle-progress', requireInteraction: true, actions: [ { action: 'open-game', title: 'Collect Resources' }, { action: 'dismiss', title: 'Later' } ], data: { idleTime: idleTime, timestamp: now } })} } } catch (error) { console.error('‚ùå Idle check failed:', error)} } async function getLastActiveTime() { try { const cache = await caches.open(DYNAMIC_CACHE); const response = await cache.match('/last-active-time'); if (response) { const data = await response.json(); return data.timestamp} } catch (error) { console.log('Could not retrieve last active time from cache')} return Date.now() - (60 * 60 * 1000)} async function getCachedGameState() { try { const cache = await caches.open(DYNAMIC_CACHE); const response = await cache.match('/offline-game-state'); if (response) { return await response.json()} } catch (error) { console.log('Could not retrieve cached game state')} return null} self.addEventListener('message', (event) => { console.log('üí¨ Message received:', event.data); const { type, data } = event.data; switch (type) { case 'SKIP_WAITING': self.skipWaiting(); break; case 'UPDATE_LAST_ACTIVE': storeLastActiveTime(data.timestamp); break; case 'CACHE_GAME_STATE': cacheGameState(data.gameState); break; default: console.log('Unknown message type:', type)} }); async function storeLastActiveTime(timestamp) { try { const cache = await caches.open(DYNAMIC_CACHE); const response = new Response(JSON.stringify({ timestamp }), { headers: { 'Content-Type': 'application/json' } }); await cache.put('/last-active-time', response); console.log('üìù Stored last active time:', new Date(timestamp))} catch (error) { console.error('‚ùå Failed to store last active time:', error)} } async function cacheGameState(gameState) { try { const cache = await caches.open(DYNAMIC_CACHE); const response = new Response(JSON.stringify(gameState), { headers: { 'Content-Type': 'application/json' } }); await cache.put('/offline-game-state', response); console.log('üíæ Game state cached for offline access')} catch (error) { console.error('‚ùå Failed to cache game state:', error)} }